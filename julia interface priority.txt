# TODO rework method arguments, some get the entire client but only need a couple elements. Maybe it's better to only give them those specifically

# ----------Public---------- #

		# ESSENTIAL
		
function connect(client, host, port, keepalive, bind_address)

# TODO replace this with in- and out loop
function in_loop(client)

function out_loop(client)

function publish(client, topic, payload, qos, retain)

function disconnect(client)

function subscribe(client, topic, qos)

function unsubscribe(client, topic)


		# METHODS FOR SELF-MAINTAINING LOOP() CALLS

# Used if client wants to handle the reads himself. Shouldn't be used if loop_start() is being used
function loop_read(client, max_packets)


# Used if client wants to handle the writes himself. Shouldn't be used if loop_start() is being used
function loop_write(client, max_packets)


# Used to determine wether or not there is network data to be written. Useful if client is using select himself
function want_write(client)


# Used to process miscellanous network events. Shouldn't be used if loop_start() is being used
function loop_misc(client)


		# NON-ESSENTIAL
		
# deletes the current will in client. Not strictly necessary
function will_clear(client)

function connect_srv(client, domain, keepalive, bind_address)

function connect_async(client, host, port, keepalive, bind_address)

# Resets the client. Useful because client will attempt to res messages still in queue after reconnect
function reinitialise(client, client_id, clean_session, userdata)

function reconnect(client)


		# FEATURES FOR LATER

# TODO websocket
function wsend_set_options(client, path, headers)

# TODO ssl
function tlsend_set_context(client, context)

# TODO ssl
function tlsend_set(client, ca_certs, certfile, keyfile, cert_reqs, tlsend_version, ciphers)

# TODO ssl
function tlsend_insecure_set(client, value)

# TODO logging
function enable_logger(client, logger)

# TODO logging
function disable_logger(client)



# ----------Private----------

		# ESSENTIAL
function packet_read(client)

function packet_write(client)

# Returns the next valid message id
function mid_generate(client)

function send_puback(client, mid)

function send_pubcomp(client, mid)

# Pack the remaining length field in the packet appropriately
function pack_remaining_length(packet, remaining_length)

function send_publish(client, mid, topic, payload, qos, info, retain=false, dup=false)
	# Assumes topic and payload are properly encoded

function send_pubrec(client)

function send_pubrel(client)

# For PUBACK, PUBCOMP, PUBREC, and PUBREL
function send_command_with_mid(client, command, mid, dup)

# For DISCONNECT, PINGREQ and PINGRESP
function send_simple_command(client, command)

function send_connect(client, keepalive, clean_session)

function send_disconnect(client)

function send_subscribe(client, topic, dup)

function send_unsubscribe(client, topic, dup)

# Pack 2 bytes of length-prefixed data into header.
function pack_str16(packet, data)
	# Strings need to be UTF-8
  
# Checks the state of each message and retries accordingly
function message_retry_check_actual(client, messages, mutex)

# Calls message_retry_check_actual for in- and outbound messages
function message_retry_check(client)

# Queue a new packet and break out of select if in threaded mode (called packet_queue in python) TODO ?
function queue_packet(client, command, packet, mid, qos, info)

function handle_packet(packet)

function handle_pingreq(client)

function handle_pingresp(client)

function handle_connack(client)

function handle_suback(client)

function handle_publish(client)

function handle_pubrel(client)

function handle_pubrec(client)

function handle_unsuback(client)

function handle_pubackcomp(client)

function handle_on_message(client)

# Sends out queued up messages until max_inflight_messages is reached
function update_inflight(client)

# Reduces inflight_messages and calls update_inflight()
function do_on_publish(client, idx, mid)

# Helper method to check if it is possible to publish to topic
function topic_wildcard_len_check(topic)

# Helper method to check if it is possible to publish to topic
function filter_wildcard_len_check(sub)


		# NON-ESSENTIAL
		
# MQTTMessageInfo helper methods
# Wait until the associated message has been published
function wait_for_publish(info::MQTTMessageInfo)

# Could be needed to notify threads waiting for this message to get published
function set_published(info::MQTTMessageInfo)

# Resets all outbound messages on reconnect TODO ?
function messagesend_reconnect_reset_out(client)

# Resets all inbound messages on reconnect TODO ?
function messagesend_reconnect_reset_in(client)

# Calls messagesend_reconnect_reset_in and messagesend_reconnect_reset_out
function messagesend_reconnect_reset(client)

# Waits the appropriate time for reconnectiong and adjusts reconnect time
function reconnect_wait(client)

function send_pingreq(client)

function send_pingresp(client)

function check_keepalive(client)

		
		# DON'T KNOW
		
# TODO what does this do?
function loop_rc_handle(client, rc)

		
		# FEATURES FOR LATER
		
# TODO logger
function easy_log(client, level, fmt, args)

# Websocket methods
function do_handshake(client, extra_headers)

function create_frame(client, opcode, data, do_masking=1)

function buffered_read(client, length)

function recv_impl(client, length)

function send_impl(client, data)

# These are all helper methods that call send_impl and recv_impl accordingly
function recv(client, length)

function read(client, length)

function send(client, data)

function write(client, data)

function ping(client)

function set_blocking(client, flag)